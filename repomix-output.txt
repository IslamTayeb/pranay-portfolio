This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-31T05:59:25.499Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
portfolio/
  app/
    globals.css
    layout.tsx
    page.tsx
  components/
    misc/
      Section.tsx
    ui/
      accordion.tsx
      accordionv3.tsx
      badge.tsx
      button.tsx
      card.tsx
      dot-pattern.tsx
      form.tsx
      input.tsx
      label.tsx
      separator.tsx
      table.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      tooltip.tsx
    Contact.tsx
    Experience.tsx
    Footer.tsx
    Gallery.tsx
    Header.tsx
    Hero.tsx
    Projects.tsx
    Publications.tsx
    sendEmail.tsx
    sharedComponents.tsx
    Skills.tsx
  hooks/
    use-toast.ts
  lib/
    utils.ts
  public/
    file.svg
    globe.svg
    next.svg
    vercel.svg
    window.svg
  .gitignore
  components.json
  eslint.config.mjs
  next.config.ts
  package.json
  postcss.config.mjs
  README.md
  tailwind.config.ts
  tsconfig.json
.gitattributes
README.md

================================================================
Files
================================================================

================
File: portfolio/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 240 13.73% 10%;
    --foreground: 229.76 31.78% 74.71%;
    --muted: 232.5 15.44% 18.32%;
    --muted-foreground: 233.79 11.37% 50%;
    --popover: 234.55 17.46% 12.35%;
    --popover-foreground: 234 12.4% 52.55%;
    --card: 234.55 17.46% 12.35%;
    --card-foreground: 229.76 31.78% 74.71%;
    --border: 232.5 15.38% 30.59%;
    --input: 232 20% 14.71%;
    --primary: 0 0% 82.75%;
    --primary-foreground: 0 0% 20%;
    --secondary: 225.45 71.22% 72.75%;
    --secondary-foreground: 234.55 17.46% 12.35%;
    --accent: 234.55 17.83% 9.47%;
    --accent-foreground: 0 0% 82.75%;
    --destructive: 1.58 47.5% 52.94%;
    --destructive-foreground: 210 40% 98.04%;
    --ring: 225.45 71.22% 72.75%;
    --chart-1: 0 0% 82.75%;
    --chart-2: 225.45 71.22% 72.75%;
    --chart-3: 234.55 17.83% 9.47%;
    --chart-4: 225.45 71.22% 75.75%;
    --chart-5: 0 3% 82.75%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.slick-slider {
  margin-bottom: 0;
}

.slick-slide {
  outline: none;
}

.slick-dots {
  bottom: -30px;
}

.slick-dots li button:before {
  font-size: 12px;
  color: #888;
}

.slick-dots li.slick-active button:before {
  color: #333;
}

.slick-prev,
.slick-next {
  z-index: 1;
}

.slick-prev {
  left: 10px;
}

.slick-next {
  right: 10px;
}

.slick-prev:before,
.slick-next:before {
  font-size: 24px;
  opacity: 0.75;
}

================
File: portfolio/app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: portfolio/app/page.tsx
================
"use client"

import { motion } from "framer-motion"
import Hero from "../components/Hero"
import Experience from "../components/Experience"
import Projects from "../components/Projects"
import Publications from "../components/Publications"
import Skills from "../components/Skills"
import Gallery from "../components/Gallery"
import Contact from "../components/Contact"
import { DotPattern } from "@/components/ui/dot-pattern"
import { cn } from "@/lib/utils"
import { Footer } from "@/components/Footer"
import { Header } from "@/components/Header"

export default function Home() {
  return (
    <div>
      <div className="space-y-10">
        <Header />
        <Hero />
        <Experience />
        <Projects />
        <Publications />
        <Skills />
        <Gallery />
        <Contact />
        <Footer />
      </div>

        <DotPattern
          width={20}
          height={20}
          cx={1}
          cy={1}
          cr={1}
          className={cn(
            "[mask-image:linear-gradient(to_bottom_right,white,transparent,transparent)] -z-10 opacity-50",
          )}
        />
    </div>
  )
}

================
File: portfolio/components/misc/Section.tsx
================
import { cn } from "@/lib/utils"
import { PropsWithChildren } from "react"

export const Section = (props: PropsWithChildren<{className?:string}>) => {
    return (
        <section className={cn("max-w-4xl px-4 m-auto text-pretty", props.className)}>{props.children}</section>
    )
}

================
File: portfolio/components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: portfolio/components/ui/accordionv3.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between pb-2.5 text-sm font-medium transition-all [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDownIcon className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: portfolio/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: portfolio/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: portfolio/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: portfolio/components/ui/dot-pattern.tsx
================
import { useId } from "react";

import { cn } from "@/lib/utils";

interface DotPatternProps extends React.SVGProps<SVGSVGElement> {
  width?: number;
  height?: number;
  x?: number;
  y?: number;
  cx?: number;
  cy?: number;
  cr?: number;
  className?: string;
  [key: string]: unknown;
}
export function DotPattern({
  width = 16,
  height = 16,
  x = 0,
  y = 0,
  cx = 1,
  cy = 1,
  cr = 1,
  className,
  ...props
}: DotPatternProps) {
  const id = useId();

  return (
    <svg
      aria-hidden="true"
      className={cn(
        "pointer-events-none absolute inset-0 h-full w-full fill-neutral-400/80",
        className,
      )}
      {...props}
    >
      <defs>
        <pattern
          id={id}
          width={width}
          height={height}
          patternUnits="userSpaceOnUse"
          patternContentUnits="userSpaceOnUse"
          x={x}
          y={y}
        >
          <circle id="pattern-circle" cx={cx} cy={cy} r={cr} />
        </pattern>
      </defs>
      <rect width="100%" height="100%" strokeWidth={0} fill={`url(#${id})`} />
    </svg>
  );
}

================
File: portfolio/components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: portfolio/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: portfolio/components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: portfolio/components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: portfolio/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: portfolio/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: portfolio/components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: portfolio/components/ui/toaster.tsx
================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: portfolio/components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: portfolio/components/Contact.tsx
================
"use client";
import React, { useState } from "react";
import { Section } from "./misc/Section";
import { motion } from "framer-motion";
import { Badge } from "@/components/ui/badge";
// import { Card } from "@/components/ui/card";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { sendEmail } from "./sendEmail";
import { ArrowUpRight, Check, Copy, Mail } from "lucide-react";
import { useToast } from "../hooks/use-toast";
// import { Code, DefaultIcon } from "./misc/sharedComponents";
import { Separator } from "@/components/ui/separator";
import Link from "next/link";
// import { LinkedInIcon } from "./Icons/LinkedInIcon";
import { Icon } from "@iconify/react/dist/iconify.js";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { useCopyToClipboard } from "usehooks-ts";

const formSchema = z.object({
  name: z
    .string()
    .min(2, { message: "Name is required" })
    .max(50, { message: "Your name must be 50 characters or fewer" }),
  email: z.string().email({ message: "Email must be valid" }),
  subject: z
    .string()
    .min(2, { message: "Subject is required" })
    .max(250, { message: "Subject must be 250 characters or fewer" }),
  text: z
    .string()
    .min(2, { message: "Message is required" })
    .max(2500, { message: "Message must be 2500 characters or fewer" }),
});

export default function Contact() {
  const { toast } = useToast();
  const [isSending, setIsSending] = useState(false);
  const [copiedButton, setCopiedButton] = useState("");

  // Define your form.
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      email: "",
      text: "",
      subject: "",
    },
  });

  // Define a submit handler.
  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsSending(true);
    try {
      const formData = new FormData();
      formData.append("name", values.name);
      formData.append("email", values.email);
      formData.append("subject", values.subject);
      formData.append("text", values.text);

      const { error } = await sendEmail(formData);

      if (error) {
        toast({
          description: `An unexpected error occurred: ${error}`,
          variant: "destructive",
        });
      } else {
        toast({
          description: "Successfully sent! I'll get back to you soon.",
        });
      }
    } catch (error) {
      toast({
        description: `An unexpected error occurred: ${error}`,
        variant: "destructive",
      });
    } finally {
      setIsSending(false);
    }
  }

  const email = "islam.tayeb@duke.edu";
  const [, copy] = useCopyToClipboard();

  const handleCopy = (buttonId: React.SetStateAction<string>) => {
    copy(email);
    setCopiedButton(buttonId);
  };

  return (
    <Section className="flex flex-col items-start gap-4">
      <motion.div
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true }}
        transition={{ duration: 0.2, ease: "easeOut" }}
        variants={{
          visible: { opacity: 1, y: 0 },
          hidden: { opacity: 0, y: 25 },
        }}
      >
        <Badge variant={"outline"} className="mb-4" id="contact">
          Contact
        </Badge>
        <h2 className="text-3xl font-semibold font-sans first:mt-0 text-primary">
          Let&apos;s work together!
        </h2>
      </motion.div>

      <motion.div
        initial="hidden"
        whileInView="visible"
        className="w-full"
        viewport={{ once: true }}
        transition={{ duration: 0.2, ease: "easeOut" }}
        variants={{
          visible: { opacity: 1, y: 0 },
          hidden: { opacity: 0, y: 25 },
        }}
      >
        <div className="flex max-md:flex-col flex-row gap-4 max-md:gap-8">
          <div className="font-sans font-medium w-full flex-[3] gap-2">
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="space-y-3"
              >
                <div className="flex flex-row gap-4">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Full Name</FormLabel>
                        <FormControl>
                          <Input
                            required
                            placeholder="John Doe"
                            className="transition"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Email Address</FormLabel>
                        <FormControl>
                          <Input
                            required
                            placeholder="johndoe@example.com"
                            className="transition"
                            {...field}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
                <FormField
                  control={form.control}
                  name="subject"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Subject</FormLabel>
                      <FormControl>
                        <Input
                          required
                          placeholder="Your subject must be 250 characters or fewer."
                          className="transition"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="text"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Message</FormLabel>
                      <FormControl>
                        <Textarea
                          required
                          placeholder="Your message must be 2500 characters or fewer."
                          className="resize-none h-36 transition"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <div className="pt-2">
                  <Button
                    type="submit"
                    className="w-full "
                    disabled={isSending}
                  >
                    {isSending ? "Sending..." : "Submit"}
                  </Button>
                </div>
              </form>
            </Form>
          </div>

          <div className="flex flex-col h-min font-sans font-medium flex-[2] w-full gap-2">
            <div className="inline-flex items-center gap-4 hover:bg-accent/25 transition-colors py-1.5 px-2.5 rounded w-full">
              <span className="bg-accent text-accent-foreground p-3 rounded-sm">
                <Mail size={16} />
              </span>

              <div>
                <div className="text-lg font-semibold">Email</div>
              </div>

              <div className="ml-auto flex flex-row gap-2">
                <TooltipProvider delayDuration={50}>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-6 w-6"
                        onClick={() => handleCopy("emailCopy")}
                      >
                        {copiedButton === "emailCopy" ? (
                          <Check size={16} className="text-green-400" />
                        ) : (
                          <Copy size={16} className="text-muted-foreground p-[1.5px]" />
                        )}
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>{copiedButton === "emailCopy" ? "Copied!" : "Copy email"}</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>

                <Link href={"mailto:islam.tayeb@duke.edu"}>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-6 w-6 rounded-sm"
                  >
                    <ArrowUpRight
                      size={16}
                      className="text-muted-foreground group-hover:-translate-x-2 group-hover:-translate-y-2 transition-all"
                    />
                  </Button>
                </Link>
              </div>
            </div>

            <Separator />

            <div className="inline-flex items-center gap-4 hover:bg-accent/25 transition-colors py-1.5 px-2.5 rounded w-full">
              <span className="bg-accent text-accent-foreground p-3 rounded-sm">
                <Icon icon="mdi:linkedin" className="w-4 h-4" />
              </span>

              <div>
                <div className="text-lg font-semibold">LinkedIn</div>
              </div>

              <div className="ml-auto flex flex-row gap-2">

                <Link href="https://www.linkedin.com/in/islam-tayeb/" target="_blank" rel="noopener noreferrer">
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-6 w-6 rounded-sm"
                  >
                    <ArrowUpRight
                      size={16}
                      className="text-muted-foreground group-hover:-translate-x-2 group-hover:-translate-y-2 transition-all"
                    />
                  </Button>
                </Link>
              </div>
            </div>

            {/* <Separator />

            <div className="inline-flex items-center gap-4 hover:bg-accent/25 transition-colors py-1.5 px-2.5 rounded w-full">
              <span className="bg-accent text-accent-foreground p-3 rounded-sm">
                <Icon icon="jam:github" className="w-4 h-4" />
              </span>

              <div>
                <div className="text-lg font-semibold">GitHub</div>
              </div>

              <div className="ml-auto flex flex-row gap-2">

                <Link href="https://github.com/IslamTayeb" target="_blank" rel="noopener noreferrer">
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-6 w-6 rounded-sm"
                  >
                    <ArrowUpRight
                      size={16}
                      className="text-muted-foreground group-hover:-translate-x-2 group-hover:-translate-y-2 transition-all"
                    />
                  </Button>
                </Link>
              </div>
            </div> */}

            <Separator />

            <div className="inline-flex items-center gap-4 hover:bg-accent/25 transition-colors py-1.5 px-2.5 rounded w-full">
              <span className="bg-accent text-accent-foreground p-3 rounded-sm">
                <Icon icon="solar:file-bold" className="w-4 h-4 p-[0.5px]" />
              </span>

              <div>
                <div className="text-lg font-semibold">Resume</div>
              </div>

              <div className="ml-auto flex flex-row gap-2">

                <Link href="Islam_Tayeb_Resume.pdf" target="_blank" rel="noopener noreferrer">
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-6 w-6 rounded-sm"
                  >
                    <ArrowUpRight
                      size={16}
                      className="text-muted-foreground group-hover:-translate-x-2 group-hover:-translate-y-2 transition-all"
                    />
                  </Button>
                </Link>
              </div>
            </div>
          </div>
        </div>
      </motion.div>
    </Section>
  );
};

================
File: portfolio/components/Experience.tsx
================
"use client"

import { motion } from "framer-motion"
import Image from "next/image"
import { Section } from "./misc/Section"
import { Badge } from "./ui/badge"
import { Card } from "./ui/card"

const experiences = [
  {
    title: "Data Science/R&D Intern",
    company: "Medtronic",
    logo: "/medtronic-logo.png",
    period: "Summer 2024",
    description:
      "Quantified sympathetic control of renal vasculature and developed indicators for renal denervation treatment efficacy.",
  },
  {
    title: "Founding Engineer",
    company: "Valinor Discovery",
    logo: "/valinor-logo.png",
    period: "Summer 2024 - Present",
    description:
      "Built an ML platform to identify and validate drug targets for systemic organ aging, securing angel investments.",
  },
]

export default function Experience() {
  return (
    <Section>
      <div className='mb-4' >
        <Badge variant={"outline"} className="" id="publications">
          Experiences
        </Badge>
        {/* <h2 className="text-3xl font-semibold font-sans first:mt-0 text-primary">
          Check out my publications...
        </h2> */}
      </div>
      <div className="space-y-8">
        {experiences.map((exp, index) => (
          <Card key={index} className="bg-card opacity-100 z-50 p-6 rounded-[0.5rem] shadow-md flex items-center"
          >
            <Image src={exp.logo || "/placeholder.svg"} alt={exp.company} width={64} height={64} className="mr-6" />
            <div>
              <h3 className="text-xl font-semibold">{exp.title}</h3>
              <p className="text-accent-foreground">{exp.company}</p>
              <p className="text-sm text-primary mb-2">{exp.period}</p>
              <p className="text-muted-foreground">{exp.description}</p>
            </div>
          </Card>
        ))}
      </div>
    </Section>
  )
}

================
File: portfolio/components/Footer.tsx
================
import React from "react";
import { Section } from "./misc/Section";
import { Copyright, CopyrightIcon, Heart } from "lucide-react";
import { Code, DefaultIcon } from "./sharedComponents";
import { HeartFilledIcon } from "@radix-ui/react-icons";

export const Footer = () => {
  return (
    <footer className="bg-card">
      <Section>
        <p className="py-4 text-muted-foreground text-sm flex gap-x-1">
          <Copyright size={12.5} className="bottom-0 mt-1" />{" "}
          <span className=" ml-0.5">
            {"2024"} {"All rights reserved"}{" "}
          </span>
          <div className="ml-auto text-right max-[375px]:hidden">
            Made with <HeartFilledIcon className="inline -mt-1" width={11.5}/> in{" "}
            <span className="italic font-semibold">Durham, NC</span>
          </div>
        </p>
      </Section>
    </footer>
  );
};

================
File: portfolio/components/Gallery.tsx
================
"use client"

import Image from "next/image"
import { Section } from "./misc/Section";
import { Badge } from "./ui/badge";

const aspectRatioClasses = {
  square: "col-span-1 row-span-1",
  vertical: "col-span-1 row-span-2",
}

export default function BentoGallery() {
  type AspectRatio = "square" | "vertical";

  const photos: { id: number; src: string; alt: string; description: string; aspectRatio: AspectRatio }[] = [

    {
      id: 1,
      src: "/placeholder.svg?height=400&width=400",
      alt: "Sunset at the beach",
      description: "Watching the sun dip below the horizon on a peaceful evening.",
      aspectRatio: "square",
    },
    {
      id: 2,
      src: "/placeholder.svg?height=800&width=400",
      alt: "Mountain hiking",
      description: "Conquering new heights and enjoying breathtaking views.",
      aspectRatio: "vertical",
    },
    {
      id: 3,
      src: "/placeholder.svg?height=400&width=400",
      alt: "City skyline",
      description: "The urban jungle comes alive as night falls.",
      aspectRatio: "square",
    },
    {
      id: 4,
      src: "/placeholder.svg?height=800&width=400",
      alt: "Family picnic",
      description: "Creating lasting memories with loved ones in nature.",
      aspectRatio: "vertical",
    },
    {
      id: 5,
      src: "/placeholder.svg?height=400&width=400",
      alt: "Concert crowd",
      description: "Feeling the energy of thousands of fans at a live show.",
      aspectRatio: "vertical",
    },
    {
      id: 6,
      src: "/placeholder.svg?height=400&width=400",
      alt: "Artistic sculpture",
      description: "Admiring the creativity of modern art installations.",
      aspectRatio: "square",
    },
  ]
  return (
    <Section className='flex flex-col items-start gap-4'>
      <Badge variant={"outline"} className="" id="publications">
        Gallery
      </Badge>

      <div className="container mx-auto px-4">
        <div className="grid grid-cols-3 gap-4 auto-rows-[200px]">
          {photos.map((photo) => (
            <div
              key={photo.id}
              className={`relative rounded-lg overflow-hidden group ${aspectRatioClasses[photo.aspectRatio]}`}
            >
              <Image
                src={photo.src || "/placeholder.svg"}
                alt={photo.alt}
                fill
                className="object-cover transition-transform duration-300 rounded-[0.5rem]"
              />
              <div className="absolute inset-0 bg-gradient-to-b from-transparent to-black opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-[0.5rem]" />
              <div className="absolute bottom-0 left-0 right-0 p-4 text-primary transform translate-y-full group-hover:translate-y-0 transition-transform duration-300 rounded-[0.5rem]">
                <p className="text-sm">{photo.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </Section>
  )
}

================
File: portfolio/components/Header.tsx
================
import Link from "next/link";
import { Section } from "./misc/Section";
import { Button, buttonVariants } from "@/components/ui/button";
import { cn } from "@/lib/utils";
// import { LinkedInIcon } from "./Icons/LinkedInIcon";
// import { GithubIcon } from "./Icons/GithubIcon";
// import { ResearchGateIcon } from "./Icons/ResearchGateIcon";
import { ArrowBigDown, Layers2, Scroll, ScrollText } from "lucide-react";
import { Code, DefaultIcon } from "./sharedComponents";
import { Icon } from "@iconify/react/dist/iconify.js";

export const Header = () => {
  return (
    <header className="sticky top-0 py-3 z-50 bg-card bg-clip-padding bg-opacity-80">
      <Section className="flex items-baseline">
        <h1 className="text-lg font-semibold text-primary">
          <Link href="#hero">pranay.vure</Link>
        </h1>
        <div className="flex-1" />
        <ul className="flex items-center gap-2">
          <Link
            href="https://linkedin.com/in/islam-tayeb"
            target="_blank"
            rel="noopener noreferrer"
            className={cn(buttonVariants({ variant: "outline" }), "size-6 p-0")}
          >
            {/* <LinkedInIcon size={12} className="text-foreground" /> */}
            <DefaultIcon
              fontSize={12.7}
              className="text-foreground -mt-0 rounded-[2.5px]"
              icon={"bi:linkedin"}
            />
          </Link>

          <Link
            href="https://github.com/IslamTayeb"
            target="_blank"
            rel="noopener noreferrer"
            className={cn(buttonVariants({ variant: "outline" }), "size-6 p-0")}
          >
            <DefaultIcon
              fontSize={15.25}
              className="text-foreground -mt-[0.5px]"
              icon={"jam:github"}
            />
          </Link>

          <Link
            href="https://www.researchgate.net/profile/Islam-Tayeb"
            target="_blank"
            rel="noopener noreferrer"
            className={cn(buttonVariants({ variant: "outline" }), "size-6 p-0")}
          >
            <Icon icon={"academicons:researchgate-square"} className="rounded-[4px] text-foreground" />
          </Link>
          <Link
            href="Islam_Tayeb_Resume.pdf"
            target="_blank"
            rel="noopener noreferrer"
            className={cn(
              buttonVariants({ variant: "outline" }),
              "px-[4.5px] h-6"
            )}
          >
            <DefaultIcon
              fontSize={13}
              className="text-foreground -mt-0"
              icon={"solar:file-bold"}
            />

            <p className="text-foreground m-0 leading-none text-xs inline max-sm:hidden ml-1">
              Resume
            </p>
          </Link>
        </ul>
      </Section>
    </header>
  );
};

================
File: portfolio/components/Hero.tsx
================
"use client"

import Image from "next/image"
import { motion } from "framer-motion"
import { useTypewriter, Cursor } from "react-simple-typewriter"
import { Section } from "./misc/Section"
import { Badge } from "./ui/badge"

export default function Hero() {
  const [text] = useTypewriter({
    words: ["Biomedical Engineer", "Researcher", "Innovator", "Programmer"],
    loop: 0,
  })

  return (
    <Section className="flex flex-col items-start gap-4">
      <div>
        <Badge variant={"outline"} className="" id="publications">
          Profile
        </Badge>
      </div>
      <div className="flex items-center gap-8">
        <Image src="/pranay.jpg" alt="Pranay Vure" width={200} height={200} className="rounded-lg" />
        <div className="text-left">
          <h1 className="text-4xl font-bold mb-2">Pranay Vure</h1>
          <h2 className="text-2xl mb-4">
            <span>{text}</span>
            <Cursor cursorStyle="_" />
          </h2>
          <p className="max-w-2xl">
            Biomedical Engineering graduate from Duke University with a focus on molecular and cellular engineering.
            Experienced in integrating deep learning and generative AI with protein design for programmable platforms in
            proteome engineering. Passionate about advancing healthcare through innovative research and technology.
          </p>
        </div>
      </div>
    </Section>
  )
}

================
File: portfolio/components/Projects.tsx
================
"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Section } from "./misc/Section"
import { Badge } from "./ui/badge"
import { Card } from "./ui/card"

const projects = [
  {
    title: "DPAC: Prediction and Design of Protein-DNA Interactions",
    description: "Developed a sequence-based contrastive learning approach for protein-DNA interactions.",
    presentation: "Poster Presentation at MOML @ MIT, 2024",
  },
  {
    title: "FusOn-pLM: Fusion Oncoprotein-Specific Language Model",
    description: "Created a language model for fusion oncoproteins using focused probabilistic masking.",
    status: "Paper in review, Nature Methods",
  },
  // Add more projects here
]

export default function Projects() {
  const [showAll, setShowAll] = useState(false)
  const displayedProjects = showAll ? projects : projects.slice(0, 3)

  return (
    <Section className="flex flex-col items-start gap-4">
      <Badge variant={"outline"} className="" id="publications">
        Projects
      </Badge>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {displayedProjects.map((project, index) => (
          <Card key={index} className="bg-card p-5 rounded-[0.5rem]">
            <h3 className="text-xl font-semibold mb-2">{project.title}</h3>
            <p className="text-primary mb-2">{project.description}</p>
            {project.presentation && <p className="text-muted-foreground italic">{project.presentation}</p>}
            {project.status && <p className="text-muted-foreground italic">{project.status}</p>}
          </Card>
        ))}
      </div>
      {!showAll && projects.length > 3 && (
        <div className="mt-8 text-center">
          <Button onClick={() => setShowAll(true)}>Show More Projects</Button>
        </div>
      )}
    </Section>
  )
}

================
File: portfolio/components/Publications.tsx
================
"use client";
import React, { ComponentPropsWithoutRef } from "react";
import { Section } from "./misc/Section";
import { motion } from "framer-motion";
import { Badge } from "@/components/ui/badge";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordionv3";
import { cn } from "@/lib/utils";
import { Icon } from "@iconify/react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import Link from "next/link";
import { ArrowUpRight, Link as Link2, LucideGithub } from "lucide-react";
import { Separator } from "@/components/ui/separator";
import { ChevronDownIcon } from "@radix-ui/react-icons";
import { Code, DefaultIcon } from "./sharedComponents";

export default function Publications() {
  const publicationsData = [
    {
      pubDate: "Dec. 2023",
      pubAuthors: (
        <>
          Mahmoud Abdelnaby,{" "}
          <span className="font-semibold text-primary">Islam Tayeb</span>, Ahmed
          Alloush, Hussain Alyosef, Aljazi Alnoaimi, Mostafa Zeama, Mohammed
          Mohammed, Sagheer Onaizi
        </>
      ),
      pubImpact: "Impact Factor: 7.2",
      pubTitle:
        "Post-synthetic Modification of UiO-66 Analogue Metal-Organic Framework as Potential Solid Sorbent for Direct Air Capture",
      pubJournal: (
        <>
          Journal of CO
          <span
            style={{
              verticalAlign: "sub",
              fontSize: 8,
              lineHeight: "1",
            }}
          >
            2
          </span>{" "}
          Utilization
        </>
      ),
      pubJournalLink:
        "https://www.journals.elsevier.com/journal-of-co2-utilization",
      pubType: "Research Article",
      pubDescription: (
        <>
          <p className="mb-1.5">
            This study enhances the UiO-66 metal-organic framework for direct
            air capture by modifying UiO-66-(OH)
            <span
              style={{
                verticalAlign: "sub",
                fontSize: 7.25,
                lineHeight: "1",
                fontWeight: "bold",
              }}
            >
              2
            </span>{" "}
            with APTES, resulting in a 15% increase in CO
            <span
              style={{
                verticalAlign: "sub",
                fontSize: 7.25,
                lineHeight: "1",
                fontWeight: "bold",
              }}
            >
              2
            </span>{" "}
            adsorption capacity and improved selectivity. The modified
            UiO-66-APTES demonstrates high stability and effectiveness in CO
            <span
              style={{
                verticalAlign: "sub",
                fontSize: 7.25,
                lineHeight: "1",
                fontWeight: "bold",
              }}
            >
              2
            </span>{" "}
            separation from air, making it a promising DAC adsorbent.
          </p>
          <p>
            I was involved in scheming and synthesizing all materials and
            performed full material characterization. I was further involved in
            writing the original manuscript and presenting it at 2 local
            symposiums in Saudi Arabia.
          </p>
        </>
      ),
      pubLink: "https://doi.org/10.1016/j.jcou.2023.102647",
      pubCategory: [
        {
          name: "Organic Chemistry",
          icon: "fluent:molecule-16-filled",
        },
        {
          name: "Materials Science",
          icon: "mdi:pipe-disconnected",
        },
        {
          name: "Environmental Tech",
          icon: "mdi:environment",
        },
      ],
    },
    {
      pubDate: "Jul. 2022",
      pubAuthors: (
        <>
          Abdullah Alsulaiman, Siraj Alharthi, Ahmed Albariqi, Rasha Mutabaqani,
          Fawzi Bokhari,{" "}
          <span className="font-semibold text-primary">Islam Tayeb</span>, Dalia
          Alharthi, Muhammad Tariq, Yasser Babaier
        </>
      ),
      pubImpact: "Impact Factor: 1.2",
      pubTitle:
        "KRAS G12C-Mutant Non-Small-Cell Lung Adenocarcinoma: First Documented Report in the Arabian Gulf",
      pubJournal: "Cureus Journal",
      pubJournalLink: "https://www.cureus.com/",
      pubType: "Case Report",
      pubDescription: (
        <>
          <p className="mb-1.5">
            This case report describes the first documented cases of KRAS
            G12C-mutant non-small-cell lung adenocarcinoma in the Arabian Gulf.
            Two Saudi males, aged 64 and 76, were diagnosed using reverse
            transcription-PCR. The 64-year-old, an ex-smoker, had generalized
            lymphadenopathy and a right lung mass. The 76-year-old, a
            non-smoker, had stage III-A left lung adenocarcinoma. The study
            calls for further research on KRAS mutations in the region to
            improve treatment strategies.
          </p>
          <p>
            I was involved in data collection and manuscript writing,
            collaborating with multiple physicians and describing their input
            and analyses.
          </p>
        </>
      ),
      pubLink: "http://dx.doi.org/10.7759/cureus.27090",
      pubCategory: [
        {
          name: "Medical Oncology",
          icon: "fa6-solid:ribbon",
        },
        {
          name: "Clinical Genetics",
          icon: "mdi:dna",
        },
        {
          name: "Regional Studies",
          icon: "fluent:location-16-filled",
        },
      ],
    },
    {
      pubDate: "Jun. 2022",
      pubAuthors: (
        <>
          Siraj Alharthi,{" "}
          <span className="font-semibold text-primary">Islam Tayeb</span>, Romar
          Pascual, Salman Aloufi, Rasha Mutabbaqani, Dalia Alharthi, Ahmed
          Al-Bariqi, Basem Almutiri, Abdullah Alsulaiman
        </>
      ),
      pubImpact: "Impact Factor: 0.8",
      pubTitle:
        "RAS Gene Mutations and Their Prevalence in Non-Small Cell Lung Cancer: A Review",
      pubJournal: "Bioscience Research",
      pubJournalLink: "",
      pubType: "Literature Review",
      pubDescription: (
        <>
          This review discusses RAS gene mutations in NSCLC, focusing on KRAS
          variants G12C, G12V, and G12D. G12C is common in smokers and lung
          adenocarcinoma, with sotorasib and adagrasib as effective inhibitors.
          KRAS mutations impact cell growth and survival, with G12D potentially
          useful as an immunotherapy biomarker. The review highlights the need
          for further research due to NSCLC&apos;s severity and prevalence in
          high altitude areas especially.,
        </>
      ),
      pubLink:
        "https://www.researchgate.net/publication/361118570_RAS_gene_mutations_and_their_prevalence_in_non-small_Cell_lung_cancer_A_Review",
      pubCategory: [
        {
          name: "Medical Oncology",
          icon: "fa6-solid:ribbon",
        },
        { name: "Clinical Genetics", icon: "mdi:dna" },
        {
          name: "Targeted Therapy",
          icon: "bx:target-lock",
        },
      ],
    },
    {
      pubDate: "Apr. 2022",
      pubAuthors: (
        <>
          Siraj Alharthi,{" "}
          <span className="font-semibold text-primary">Islam Tayeb</span>, Romar
          Pascual, Salman Aloufi, Khalid Alotaibi
        </>
      ),
      pubImpact: "Impact Factor: 0.8",
      pubTitle:
        "Medicinal Effects and Phytochemical Composition of Capparis Cartilaginea Decne: A Review",
      pubJournal: "Bioscience Research",
      pubJournalLink: "",
      pubType: "Literature Review",
      pubDescription: (
        <>
          This review highlights Capparis Cartilaginea Decne from the
          Capparaceae family, valued for its medicinal use historically
          throughout many areas of Asia and Africa. Phytochemical screenings
          reveal diverse metabolites supporting its therapeutic claims,
          validating its traditional medicinal applications.
        </>
      ),
      pubLink:
        "https://www.researchgate.net/publication/359931677_Medicinal_effects_and_Phytochemical_composition_of_Capparis_Cartilaginea_Decne_A_Review",
      pubCategory: [
        {
          name: "Phytochemistry",
          icon: "mdi:leaf",
        },
        {
          name: "Folk Medicine",
          icon: "icon-park-solid:traditional-chinese-medicine",
        },
      ],
    },
  ];

  return (
    <Section className="flex flex-col items-start gap-4">
      <div>
        <Badge variant={"outline"} className="" id="publications">
          Publications
        </Badge>
      </div>

      {publicationsData.map(
        ({
          pubDate,
          pubAuthors,
          pubTitle,
          pubJournal,
          pubJournalLink,
          pubDescription,
          pubLink,
          pubImpact,
          pubType,
          pubCategory,
        }) => {
          return (
            <div key={pubTitle} className="project max-md:w-full">
              <div className="flex items-center gap-4 mx-2 ">
                <Accordion
                  type="single"
                  collapsible
                  className="w-full font-sans "
                >
                  <AccordionItem
                    value="item-1"
                    className="pb-4 text-pretty flex flex-row transition gap-4"
                  >
                    <div className="flex items-center text-muted-foreground text-sm w-min text-left font-mono">
                      <p className="">{pubDate}</p>
                    </div>
                    <div>
                      <div className="flex flex-row">
                        <div className="text-primary flex flex-col">
                          <div className="text-base font-bold text-foreground">
                            <Link
                              href={pubLink}
                              target="_blank"
                              rel="noopener noreferrer"
                            >
                              <span className="transition brightness-105">
                                {pubTitle}
                              </span>{" "}
                              <ArrowUpRight
                                className="inline-block w-5 mb-0.5"
                                size={16}
                              />
                            </Link>
                          </div>
                          <div className="text-muted-foreground text-sm font-normal text-[0.925em]">
                            <TooltipProvider delayDuration={50}>
                              <Tooltip>
                                <TooltipTrigger className="font-medium">
                                  <div className="relative after:absolute after:bottom-0 after:left-0 before:h-[0.5px] after:h-[0.5px] after:w-full after:origin-bottom-left after:scale-x-100 hover:after:scale-x-0 after:transition-transform after:ease-in-out after:duration-200 after:bg-gray-500 text-foreground">
                                    {pubJournalLink ? (
                                      <Link
                                        href={pubJournalLink}
                                        target="_blank"
                                        rel="noopener noreferrer"
                                      >
                                        {pubJournal}
                                      </Link>
                                    ) : (
                                      pubJournal
                                    )}
                                  </div>
                                </TooltipTrigger>
                                <TooltipContent className="shadow-md shadow-card transition-all">
                                  <p>{pubImpact}</p>
                                </TooltipContent>
                              </Tooltip>
                            </TooltipProvider>
                            {" - " + pubType}{" "}
                          </div>
                          <div className="text-muted-foreground  text-xs font-light py-1.5">
                            {typeof pubAuthors === "string" ? (
                              `- ${pubAuthors}`
                            ) : (
                              <>{pubAuthors}</>
                            )}
                          </div>
                        </div>
                      </div>
                      <AccordionContent className="mr-8 pb-2.5 pt-0.5">
                        {pubDescription}
                      </AccordionContent>
                      <div className="flex flex-wrap gap-2 text-xs leading-none">
                        {pubCategory.map((category) => (
                          // consider using max-md:text-nowrap
                          <Code
                            key={category.name}
                            className="inline-flex items-center"
                          >
                            <DefaultIcon
                              icon={category.icon}
                              className="text-current -mt-0"
                              height="14"
                            />
                            <span className="ml-2">{category.name}</span>
                          </Code>
                        ))}
                      </div>
                    </div>
                    <AccordionTrigger className="pb-0 p-1" />
                  </AccordionItem>
                </Accordion>
              </div>
            </div>
          );
        }
      )}
    </Section>
  );
};

================
File: portfolio/components/sendEmail.tsx
================
"use server";

import { getErrorMessage, validateString } from "@/lib/utils";
import { Resend } from "resend";

const resend = new Resend(process.env.RESEND_API_KEY);

export const sendEmail = async (formData: FormData) => {
  const email = formData.get("email");
  const name = formData.get("name");
  const text = formData.get("text");
  const subject = formData.get("subject");

  // simple server-side validation
  if (!validateString(email, 500)) {
    return {
      error: "Invalid sender email",
    };
  }
  if (!email.includes("@")) {
    return {
      error: "Invalid email format",
    };
  }
  if (!validateString(name, 500)) {
    return {
      error: "Invalid sender name",
    };
  }
  if (!validateString(subject, 250)) {
    return {
      error: "Invalid subject",
    };
  }
  if (!validateString(text, 2500)) {
    return {
      error: "Invalid message",
    };
  }

  let data;
  try {
    data = await resend.emails.send({
      from: "Portfolio <TEST@TEST.com>",
      subject: subject as string,
      replyTo: email as string,
      to: "islam.tayeb@duke.edu",
      text: `From: ${name}\nEmail: ${email}\n\n${text}`,
    });
  } catch (error) {
    return {
      error: getErrorMessage(error),
    };
  }
  return {
    data,
  };
};

================
File: portfolio/components/sharedComponents.tsx
================
import type { ComponentPropsWithoutRef } from "react"
import { cn } from "@/lib/utils"
import { Icon } from "@iconify/react"

export const Code = ({ className, ...props }: ComponentPropsWithoutRef<"span">) => {
  return (
    <span
      className={cn(
        "bg-accent/30 hover:bg-accent/50 transition-colors border border-accent px-1 py-0.5 rounded-sm text-primary font-mono text-sm text-nowrap tracking-[-0.015em]",
        className,
      )}
      {...props}
    />
  )
}

export const DefaultIcon = ({ className, ...props }: ComponentPropsWithoutRef<typeof Icon>) => {
  return <Icon className={cn("inline align-middle -mt-[0.18em]", className)} {...props} />
}

================
File: portfolio/components/Skills.tsx
================
"use client";
import React from "react";
import { Section } from "./misc/Section";
import { motion } from "framer-motion";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  // TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Icon } from "@iconify/react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
// import { Code, DefaultIcon } from "./sharedComponents";

export default function Skills() {

  const skillsData = [
    {
      category: "Programming Languages",
      technologies: [
        { name: "Python", icon: "akar-icons:python-fill" },
        { name: "TypeScript", icon: "akar-icons:typescript-fill" },
        { name: "Java", icon: "fa6-brands:java" },
        { name: "SQL", icon: "fa-solid:database" },
        { name: "R Language", icon: "devicon-plain:r" },
        { name: "C Language", icon: "devicon-plain:c" },
        { name: "MATLAB", icon: "file-icons:matlab" },
        // { name: "LaTeX", icon: "file-icons:latex" },
      ],
    },
    {
      category: "Machine Learning",
      technologies: [
        { name: "TensorFlow", icon: "simple-icons:tensorflow" },
        { name: "PyTorch", icon: "simple-icons:pytorch" },
        { name: "BERT", icon: "bi:google" },
        { name: "Gemini", icon: "simple-icons:googlegemini" },
        { name: "GPT", icon: "simple-icons:openai" },
        { name: "SciKit-Learn", icon: "simple-icons:scikitlearn" },
      ],
    },
    {
      category: "Web/App Development",
      technologies: [
        { name: "React", icon: "akar-icons:react-fill" },
        { name: "Angular", icon: "cib:angular" },
        { name: "SCSS", icon: "simple-icons:sass" },
        { name: "Framer Motion", icon: "teenyicons:framer-solid" },
        { name: "HTML5", icon: "simple-icons:html5" },
        { name: "CSS3", icon: "simple-icons:css3" },
        { name: "PostgreSQL", icon: "akar-icons:postgresql-fill" },
      ],
    },
    {
      category: <>Deployment&nbsp;& Integration</>,
      technologies: [
        { name: "Linux", icon: "devicon-plain:linux" },
        { name: "Git", icon: "simple-icons:git" },
        { name: "Docker", icon: "simple-icons:docker" },
        { name: "Vercel", icon: "ion:logo-vercel" },
      ],
    },
    // {
    //   category: "Research",
    //   technologies: [
    //     { name: "Organic Synthesis (Porous Polymers)", icon: "eos-icons:molecules-outlined" },
    //     { name: "CO2 & H2O Capture/Utilization", icon: "mdi:molecule-co2" },
    //     { name: "Physical Modelling", icon: "mdi:atom" },
    //     { name: "Genetic Variation", icon: "ph:dna-fill" },
    //     { name: "LaTeX", icon: "file-icons:latex" },
    //   ],
    // },
    // {
    //   category: "Design",
    //   technologies: [
    //     { name: "Adobe Suite", icon: "simple-icons:adobecreativecloud" },
    //     { name: "Blender", icon: "file-icons:blender" },
    //     { name: "Cinema4D", icon: "simple-icons:cinema4d" },
    //     { name: "Graphical Abstracts & Figure", icon: "ri:image-add-fill" },
    //   ],
    // },
  ];

  return (
    <Section className="flex flex-col items-start gap-4">
      <motion.div
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true }}
        transition={{ duration: 0.2, ease: "easeOut" }}
        variants={{
          visible: { opacity: 1, y: 0 },
          hidden: { opacity: 0, y: 25 },
        }}
      >
        <Badge variant={"outline"} id="skills">
          Skills
        </Badge>
      </motion.div>

      <motion.div
        initial="hidden"
        whileInView="visible"
        className="w-full"
        viewport={{ once: true }}
        transition={{ duration: 0.2, ease: "easeOut" }}
        variants={{
          visible: { opacity: 1, y: 0 },
          hidden: { opacity: 0, y: 25 },
        }}
      >
        {/* might want t remve categry and technlgies  */}
        <Table className="">
          <TableHeader>
            <TableRow>
              <TableHead className="text-left w-1/6 font-extrabold text-foreground">
                Category
              </TableHead>
              <TableHead className="text-left w-5/6 font-extrabold text-foreground">
                Technologies
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody className="text-accent-foreground">
            {skillsData.map((skillCategory) => (
              <TableRow key={skillCategory.category.toString()}>
                <TableCell className="font-medium text-muted-foreground">
                  {skillCategory.category}
                </TableCell>
                <TableCell className="flex gap-3">
                  {skillCategory.technologies.map((tech) => (
                    <TooltipProvider key={tech.name} delayDuration={50}>
                      <Tooltip>
                        <TooltipTrigger>
                          <div className="p-1">
                            <Icon
                              className="hover:blur-[6px] absolute transition-all opacity-35"
                              icon={tech.icon}
                              width="2.25em"
                              height="2.25em"
                            />
                            <Icon
                              className=""
                              icon={tech.icon}
                              width="2.25em"
                              height="2.25em"
                            />
                          </div>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p className="font-semibold">{tech.name}</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  ))}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </motion.div>
    </Section>
  );
};

================
File: portfolio/hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: portfolio/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export const validateString = (
  value: unknown,
  maxLength: number
): value is string => {
  if (!value || typeof value !== "string" || value.length > maxLength) {
    return false;
  }

  return true;
};

export const getErrorMessage = (error: unknown): string => {
  let message: string;

  if (error instanceof Error) {
    message = error.message;
  } else if (error && typeof error === "object" && "message" in error) {
    message = String(error.message);
  } else if (typeof error === "string") {
    message = error;
  } else {
    message = "Something went wrong";
  }

  return message;
};

================
File: portfolio/public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: portfolio/public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: portfolio/public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: portfolio/public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: portfolio/public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: portfolio/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: portfolio/components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: portfolio/eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: portfolio/next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: portfolio/package.json
================
{
  "name": "portfolio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@iconify/react": "^5.2.0",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.5",
    "@radix-ui/react-tooltip": "^1.1.7",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.0.6",
    "lucide-react": "^0.474.0",
    "next": "15.1.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "react-simple-typewriter": "^5.0.1",
    "react-slick": "^0.30.3",
    "resend": "^4.1.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "usehooks-ts": "^3.1.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/react-slick": "^0.23.13",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: portfolio/postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: portfolio/README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: portfolio/tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: portfolio/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: .gitattributes
================
# Auto detect text files and perform LF normalization
* text=auto

================
File: README.md
================
# pranay portfolio
 Portoflio for Pranay Vure
